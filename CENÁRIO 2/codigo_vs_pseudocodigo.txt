Comparativo: Implementação do Bellman-Ford vs. Pseudocódigo

A solução para encontrar o menor caminho com o Bellman-Ford, implementada em Python, reflete as etapas principais do pseudocódigo teórico, mas adapta sua estrutura para ser mais determinística e eficiente no ambiente de programação.

Inicialização: O pseudocódigo estabelece as distâncias com valor zero para a origem e infinito para os demais vértices, além de anular os predecessores. Nossa implementação faz o mesmo usando um dicionário distancias para armazenar os custos, inicializados com float('inf') (o equivalente a infinito), e um dicionário antecessores para guardar os nós anteriores, preenchido com None.

Loop Principal: O pseudocódigo descreve o processo com um loop conceitual que se repete enquanto houver a possibilidade de otimizar um caminho. Nossa implementação, em vez de usar um while de condição abstrata, adota a abordagem padrão do algoritmo: um for loop que executa um número de vezes pré-definido (número de vértices - 1). Essa estrutura garante que as distâncias se propaguem por todo o grafo de forma controlada.

Relaxamento: O pseudocódigo compara o custo de um novo caminho (passando por um vértice u para chegar a v) com o custo já conhecido de v. Se o novo caminho for mais curto, a distância e o predecessor de v são atualizados. O nosso código implementa essa mesma lógica de "relaxamento" dentro do loop for, que percorre todas as arestas e, através de uma condição if, atualiza os dicionários distancias e antecessores sempre que um caminho mais vantajoso é encontrado.
